# app/main.py

import uvicorn
from fastapi import FastAPI, Request, Response
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from loguru import logger

from src.config import settings
from src.routes import apple_webhook, auth, iap

app = FastAPI(
    title="IAP Subscription Service",
    version="1.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# ‚Äî CORS (–µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º –¥–æ–º–µ–Ω–µ/API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞) ‚Äî
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–¥–æ–º–µ–Ω–æ–≤
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.middleware("http")
async def log_requests(request: Request, call_next):
    body = await request.body()
    logger.info(f"‚û°Ô∏è {request.method} {request.url} Body: {body!r}")
    try:
        response = await call_next(request)
    except Exception:
        # 3) Catch anything unhandled and log its traceback
        logger.exception("üí• Unhandled exception during request")
        # re-raise so FastAPI can return its own 500 or debug page
        raise
    if response.status_code >= 400:
        # read & log the response body as before‚Ä¶
        resp_body = b""
        async for chunk in response.body_iterator:
            resp_body += chunk
        text = resp_body.decode("utf-8", "replace")
        logger.error(f"‚¨ÖÔ∏è {response.status_code} for {request.url}\n{text}")
        return Response(
            content=resp_body,
            status_code=response.status_code,
            headers=response.headers,
        )
    return response


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    # –ø–æ–ø—ã—Ç–∫–∞ —Å—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ json –±—ã–ª –±–∏—Ç—ã–π)
    try:
        body_bytes = await request.body()
        body = body_bytes.decode("utf-8")
    except Exception:
        body = "<cannot decode body>"

    # –ª–æ–≥–∏—Ä—É–µ–º URL, —Ç–µ–ª–æ –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    logger.error(
        f"üö® Validation error for {request.method} {request.url}\n"
        f"Body: {body}\nErrors: {exc.errors()}"
    )

    # –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ—ë —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON —Å detail —Ç–æ–∂–µ –Ω–æ—Ä–º:
    return JSONResponse(
        status_code=422,
        content={
            "detail": exc.errors(),
            "body": body,
        },
    )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router, prefix="/auth", tags=["auth"])
app.include_router(iap.router, prefix="/iap", tags=["iap"])
app.include_router(apple_webhook.router, tags=["apple"])


# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.get("/health", tags=["health"])
async def health_check():
    return {"status": "ok"}


if __name__ == "__main__":
    uvicorn.run(
        "src.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info",
    )
